################################################################################
#!perl
#
#
#  Rob McCarthy's MalwareSearch source
#  Copyright 2006 Lightspeed Systems Corp.
#
################################################################################



# Pragmas
use warnings;
use strict;


use Getopt::Long;
use GoogleSearch;

use Content::File;



# Options & Defaults
my $def_keyfile = "keywords";

my $opt_max_results = 10;
my $opt_outfile		= "MalwareSearch.urls";
my $opt_infile		= "MalwareSig.txt";
my $opt_string;

my $opt_version;
my $opt_help;
my $_version = "1.0.0";




################################################################################
#
MAIN:
#
################################################################################
{
    # Get the options
    Getopt::Long::Configure("bundling");

    my $options = Getopt::Long::GetOptions
    (
        "i|input=s"			=> \$opt_infile,
        "m|maxresults=i"	=> \$opt_max_results,
        "o|output=s"		=> \$opt_outfile,
        "s|string=s"		=> \$opt_string,
        "v|version"			=> \$opt_version,
        "h|help"			=> \$opt_help
    );


    &StdHeader( "MalwareSearch" );
	
	
    &Usage() if ( $opt_help );
    &Version() if ( $opt_version );

	my $opt;
	$opt = shift;
	$opt_infile = $opt if ( $opt );
	
	$opt = shift;
	$opt_outfile = $opt if ( $opt );

	&Usage() if ( ( ! $opt_infile )  ||  ( ! $opt_outfile ) );


	print "Searching Google for Malware ...\n";
	
	$opt_string = quotemeta( $opt_string ) if ( $opt_string );
	print "Starting with virus matching $opt_string\n" if ( $opt_string );


	my $google_key;
	
	if ( open( KEY, "<c:\\perl\\site\\lib\\googlekey.txt" ) )
		{	print "Found googlekey.txt at c:\\perl\\site\\lib\\googlekey.txt\n";
			$google_key = <KEY>;
			chomp( $google_key );
			close KEY;
		}

	elsif ( open( KEY, "<googlekey.txt" ) )
		{	print "Found googlekey.txt in the current directory\n";
			
			$google_key = <KEY>;
			chomp( $google_key );
			close KEY;
		}
	
	else
		{	print "Using the default googlekey\n";
			$google_key = "/fhrQ/RQFHKDpBBtzkJhvOjWrB3jFwyr";
		}
		
		
    # Initialize Google
    my $google = new GoogleSearch( $google_key );

	print "Using $opt_infile for the Malware signatures ...\n";
	
	
	open( INPUT, $opt_infile ) or die( "Cannot open input file $opt_infile: $!\n" );
	
	# Open the output file
	my $OUTFILE;
	open $OUTFILE, ">>$opt_outfile" or die( "Cannot open outfile $opt_outfile: $!\n" );

	print "Writing results to $opt_outfile ...\n";
  
    
	my $started = 1;
	$started = undef if ( $opt_string );
	
	while( my $line = <INPUT> )
		{	chomp( $line );
			
			next if ( ! $line );
			
			my ( $virus_name, $time_date, $image_size, $entry_point, $code_size ) = split /\:/, $line, 5;
		
			next if ( ! defined $code_size );
			
			if ( ! $started )
				{	next if ( ! ( $virus_name =~ m/$opt_string/i ) );
					$started = 1;
				}
				
			print "Searching for $virus_name ...\n";			
			
			my $results = &MalwareSearch( $google, $OUTFILE, $time_date, $image_size, $entry_point, $code_size );
			
			print "Found $results copies of $virus_name\n" if ( $results );
			
			print "Found nothing for $virus_name\n" if ( ! $results );
		}
	

	close( INPUT );
	close( $OUTFILE );
	
	&StdFooter;
	
	exit;
}



################################################################################
#
sub MalwareSearch( $$$$$ )
#
################################################################################
{	my $google = shift;
	my $OUTFILE = shift;
	
	
	my @parameters;
	while ( my $param = shift )
		{	push @parameters, $param;
		}
	

	return( undef ) if ( $#parameters < 3 );
	
	# Do the search 
	my $search_string = "\"Time Date Stamp: $parameters[ 0 ]\"" . " \"Size of Image: $parameters[ 1 ]\"" .	
						" \"Entry Point: $parameters[ 2 ]\"" . " \"Size of Code: $parameters[ 3 ]\"";

#	print "Search Text: $search_string\n";

	my $results = &Search( $google, $search_string, $OUTFILE );

	return( $results );
}



################################################################################
#
sub Search( $$$ )
#
################################################################################
{
    # Get parameters
    my ( $google, $search_text, $OUTFILE ) = @_;


    # Loop through and get all the reuslts
    my $start = 0 + 0;
    my @results;
    my $result_count = 0 + 0;
    my $total_results = 0 + 0;

    do
    {
        # Get the next results
        @results = &NextSearch( $google, $search_text, $start );

        # Dump the results to the output file
		foreach ( @results )
			{	next if ( ! $_ );
				
				my $url = $_;

				print $OUTFILE "$url\n";
			}
        
        $result_count = @results;
        $total_results += $result_count;

        $start += 10;
    } while ( ( $result_count >= 10 )  &&  ( $total_results < $opt_max_results ) );

    return( $total_results );
}




################################################################################
#
sub NextSearch( $$$ )
#
################################################################################
{
    # Get parameters
    my ( $google, $search_text, $start ) = @_;
    my @results;
	
    if ( ! $google )
		{	print "No google object\n";
			return( @results );
		}


    # Do the search
	my $return = $google->doGoogleSearch( query => $search_text, start => $start, maxResults => 10 )->result();

	if ( ! defined $return->{'resultElements'} )
		{	return( @results );
		}


	foreach my $entry (@{$return->{'resultElements'}}) 
		{	push @results, $entry->{URL};
		}


    return @results;
}




################################################################################
# 
sub Usage
#
################################################################################
{
    print <<".";
Usage: MalwareSearch INPUT OUTPUT [OPTION(s)]
Uses Google to search for the malware signatures.

  -i, --input INPUT       file of malware signatures, default MalwareSig.txt
  -m, --max MAX           maximum results, default is 10
  -o, --output OUTPUT     output file of URLs, default MalwareSearch.urls
  -s, --string STRING     string to match virus name when restarting
  -h, --help              display this help and exit
  -v, --version           display version information and exit
.
    exit;
}


################################################################################
# 
sub Version
#
################################################################################
{
    (my $me = $0) =~ s/\.cmd$//;

    print <<".";
$me $_version
.
    exit;
}

################################################################################

__END__

:endofperl
